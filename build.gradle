plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testCompile("org.junit.jupiter:junit-jupiter-params:5.7.0")
}

test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    from project.sourceSets.main.allSource
    manifest {
        attributes 'Main-Class': 'edu.touro.mco152.bm.App'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

sourceSets {
    sourceSets.main.output.resourcesDir = sourceSets.main.java.outputDir
}